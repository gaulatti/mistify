name: Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'infrastructure/**'
  workflow_dispatch:

jobs:
  check-base-changes:
    runs-on: ubuntu-latest
    outputs:
      base-changed: ${{ steps.check.outputs.base-changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if base files changed
        id: check
        run: |
          # Check if Dockerfile.base or requirements.txt changed in this push
          BASE_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -E '^(Dockerfile\.base|requirements\.txt)$' || echo "")
          if [ -n "$BASE_CHANGED" ]; then
            echo "base-changed=true" >> $GITHUB_OUTPUT
            echo "Base files changed: $BASE_CHANGED"
          else
            echo "base-changed=false" >> $GITHUB_OUTPUT
            echo "No base files changed"
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-base-changes
    if: needs.check-base-changes.outputs.base-changed == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DEPLOYMENT_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:latest .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [check-base-changes, build-and-push]
    if: needs.check-base-changes.outputs.base-changed == 'false'
    steps:
      - name: Deploy to on-premises host
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.DEPLOYMENT_TOKEN }}
            docker pull ghcr.io/${{ github.repository }}:latest

            # Stop and remove any running container with the same name
            docker stop mistify || true
            docker rm mistify || true

            # Generate a UUID for awslogs-stream
            LOG_STREAM_UUID=$(uuidgen)

            # Run the new container on port 8000 with GPU support
            docker run -d --name mistify \
              -p 8000:8000 \
              --gpus all \
              --restart=always \
              -v mistify-cache:/home/appuser/.cache \
              -v mistify-models:/home/appuser/.hf_models \
              --log-driver=awslogs \
              --log-opt awslogs-region=${{ vars.AWS_REGION }} \
              --log-opt awslogs-group=${{ vars.LOGS_GROUP }} \
              --log-opt awslogs-stream="$LOG_STREAM_UUID" \
              ghcr.io/${{ github.repository }}:latest